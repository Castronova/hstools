{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to HSTools A humble collection of HydroShare tools written in Python 3. The hstools library was originally a port of the CUAHSI JupyterHub utilities.hydroshare package modified to work on desktop computers. The goal is to provide a set of basic functions that simplify working with HydroShare data. Documentation Getting Started - Everything you need to get started using hstools Commands - A comprehensive list of hstools commands. Examples - Example use of HSTools (Coming Soon) Help and Reference - (Coming Soon) Contributing - A guide to contributing (Coming Soon)","title":"Home"},{"location":"#welcome-to-hstools","text":"A humble collection of HydroShare tools written in Python 3. The hstools library was originally a port of the CUAHSI JupyterHub utilities.hydroshare package modified to work on desktop computers. The goal is to provide a set of basic functions that simplify working with HydroShare data.","title":"Welcome to HSTools"},{"location":"#documentation","text":"Getting Started - Everything you need to get started using hstools Commands - A comprehensive list of hstools commands. Examples - Example use of HSTools (Coming Soon) Help and Reference - (Coming Soon) Contributing - A guide to contributing (Coming Soon)","title":"Documentation"},{"location":"about/","text":"About","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"contributing/","text":"Contributing todo","title":"Contributing"},{"location":"contributing/#contributing","text":"todo","title":"Contributing"},{"location":"examples/","text":"Examples todo","title":"Examples"},{"location":"examples/#examples","text":"todo","title":"Examples"},{"location":"getting-started/","text":"Getting Started Installation This hstools package is currently only supported on MacOSX and Linux. It can be installed using the Python package installer (Pip) or directly from source. Install using Pip The hstools package can be found at https://pypi.org/project/HSTools/ and installed using the following command. pip install hstools Install from source The source code for hstools can be found at https://github.com/Castronova/hstools . Perform the following commands to install from source. git clone https://github.com/Castronova/hstools cd hstools python setup.py install Overview After the libary is installed, it can be executed using the following command: hs . There are currently 6 options for interacting with HydroShare: get , add , create , delete , ls , and init . For detailed information about any of these add the --help flag after the options, e.g. $hs get --help . $ hs usage: hs [-h] {get,add,create,delete,ls,init} ... HSTools is a humble collection of tools for interacting with data in the HydroShare repository. It wraps the HydroShare REST API to provide simple commands for working with resources. positional arguments: {get,add,create,delete,ls,init} get Retrieve resource content from HydroShare add Add files to an existing HydroShare resource create Create a new HydroShare resource delete Delete a HydroShare resource list List HydroShare resources that you own init Initialize a connection with HydroShare optional arguments: -h, --help show this help message and exit Connect to HydroShare Connect to HydroShare using the init option. This will create an authentication file for accessing HydroShare that is cached in your $HOME directory by default. This path can be changed using the -d flag. Note, this command only needs to be executed once. $ hs init Enter HydroShare Username: <username> Enter HydroShare Password: <password> Auth saved to: ~/.hs_auth Create Resource Create a new HydroShare resource using the create options. $ hs create \\ -a This is the abstract of my resource \\ -t My resource Title \\ -k keyword1 keyword2 keyword3 \\ -f myfile.txt ./another/file.txt List Resources Listing HydroShare resources using the ls options. $ hs list List files in long format $ hs list -l List the first 17 resources in long format $ hs list -l -n 17 Filter resources by published $ hs list -filter published=true Download Resource Downloading data from the HydroShare platform is done using globally unique identfiers (GUID). This GUIDs are defined for every HydroShare resource and can be aquired from a resources URL. The get option downloads the resource bagit archive and unzips it into a directory of your choosing. $ hs get <hydroshare resource id> Add Files Add files to an existing HydroShare resource using the add option. This command allows you to optionally overwrite ( --overwrite ) files thatalready exist in a resource, which is helpful when updating content. $ hs add <hydroshare resource id> -f my-file.txt my-other-file.txt Deleting Resource Delete an entire HydroShare resource using the delete option. This is useful for cleaning up your HydroShare workspace. BEWARE: THIS WILL PERMANENTLY DELETE YOUR HYDROSHARE RESOURCE DATA. $ hs delete <hydroshare resource id>","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#installation","text":"This hstools package is currently only supported on MacOSX and Linux. It can be installed using the Python package installer (Pip) or directly from source.","title":"Installation"},{"location":"getting-started/#install-using-pip","text":"The hstools package can be found at https://pypi.org/project/HSTools/ and installed using the following command. pip install hstools","title":"Install using Pip"},{"location":"getting-started/#install-from-source","text":"The source code for hstools can be found at https://github.com/Castronova/hstools . Perform the following commands to install from source. git clone https://github.com/Castronova/hstools cd hstools python setup.py install","title":"Install from source"},{"location":"getting-started/#overview","text":"After the libary is installed, it can be executed using the following command: hs . There are currently 6 options for interacting with HydroShare: get , add , create , delete , ls , and init . For detailed information about any of these add the --help flag after the options, e.g. $hs get --help . $ hs usage: hs [-h] {get,add,create,delete,ls,init} ... HSTools is a humble collection of tools for interacting with data in the HydroShare repository. It wraps the HydroShare REST API to provide simple commands for working with resources. positional arguments: {get,add,create,delete,ls,init} get Retrieve resource content from HydroShare add Add files to an existing HydroShare resource create Create a new HydroShare resource delete Delete a HydroShare resource list List HydroShare resources that you own init Initialize a connection with HydroShare optional arguments: -h, --help show this help message and exit","title":"Overview"},{"location":"getting-started/#connect-to-hydroshare","text":"Connect to HydroShare using the init option. This will create an authentication file for accessing HydroShare that is cached in your $HOME directory by default. This path can be changed using the -d flag. Note, this command only needs to be executed once. $ hs init Enter HydroShare Username: <username> Enter HydroShare Password: <password> Auth saved to: ~/.hs_auth","title":"Connect to HydroShare"},{"location":"getting-started/#create-resource","text":"Create a new HydroShare resource using the create options. $ hs create \\ -a This is the abstract of my resource \\ -t My resource Title \\ -k keyword1 keyword2 keyword3 \\ -f myfile.txt ./another/file.txt","title":"Create Resource"},{"location":"getting-started/#list-resources","text":"Listing HydroShare resources using the ls options. $ hs list List files in long format $ hs list -l List the first 17 resources in long format $ hs list -l -n 17 Filter resources by published $ hs list -filter published=true","title":"List Resources"},{"location":"getting-started/#download-resource","text":"Downloading data from the HydroShare platform is done using globally unique identfiers (GUID). This GUIDs are defined for every HydroShare resource and can be aquired from a resources URL. The get option downloads the resource bagit archive and unzips it into a directory of your choosing. $ hs get <hydroshare resource id>","title":"Download Resource"},{"location":"getting-started/#add-files","text":"Add files to an existing HydroShare resource using the add option. This command allows you to optionally overwrite ( --overwrite ) files thatalready exist in a resource, which is helpful when updating content. $ hs add <hydroshare resource id> -f my-file.txt my-other-file.txt","title":"Add Files"},{"location":"getting-started/#deleting-resource","text":"Delete an entire HydroShare resource using the delete option. This is useful for cleaning up your HydroShare workspace. BEWARE: THIS WILL PERMANENTLY DELETE YOUR HYDROSHARE RESOURCE DATA. $ hs delete <hydroshare resource id>","title":"Deleting Resource"},{"location":"ref/","text":"","title":"Ref"},{"location":"reference/","text":"hstools hstools.auth This is a test basic_authorization basic_authorization(authfile='~/.hs_auth_basic') performs basic HS authorization using username and password stored in ~/.hs_auth_basic file in the following format (b64 encoded): { \"usr\": \" \" \"pwd\": \" \" } Returns hs_restclient instance or None oauth2_authorization oauth2_authorization(authfile='~/.hs_auth') performs HS authorization using OAuth2 credentials stored in ~/.hs_auth file, in a pickled binary format. Returns hs_restclient instance or None hstools.compat hstools.log hstools.resource hstools.threads hstools.funcs hstools.funcs.delete hstools.funcs.describe hstools.funcs.add hstools.funcs.create hstools.funcs.ls hstools.funcs.content hstools.funcs.init hstools.funcs.get hstools.progress hstools.utilities get_server_url_for_path get_server_url_for_path(p) gets the url corresponding to a given file or directory path p : path to convert into a url returns the url path for the filepath p get_relative_path get_relative_path(p) gets the path relative to the jupyter home directory p: path to convert into relative path returns the path relative to the default jupyter home directory hstools.hydroshare hydroshare Objects class hydroshare() __init__ | __init__(save_dir=None, authfile='~/.hs_auth') save_dir is the location that data will hs resources will be saved. close | close() closes the connection to HydroShare deleteResource | deleteResource(resid) Deletes a hydroshare resource args: -- resid: hydroshare resource id returns: -- True if successful, else False getResourceMetadata | getResourceMetadata(resid) Gets metadata for a specified resource. args: -- resid: hydroshare resource id returns: -- resource metadata object createResource | createResource(abstract, title, keywords=[], content_files=[]) Creates a hydroshare resource. args: -- abstract: abstract for resource (str, required) -- title: title of resource (str, required) -- keywords: list of subject keywords (list, default=>[]) -- content_files: data to save as resource content (list, default=>[]) returns: -- resource_id getResource | getResource(resourceid) Downloads content of a hydroshare resource. args: -- resourceid: id of the hydroshare resource (str) returns: -- None getResourceFiles | getResourceFiles(resid) returns a list of files in a hydroshare resource addContentToExistingResource | addContentToExistingResource(resid, source, target=None) Adds content files to an existing hydroshare resource. args: -- resid: id of an existing hydroshare resource (str) -- source: file path to be added to resource -- target: target path relative to the root directory of the resource returns: -- None loadResourceFromLocal | loadResourceFromLocal(resourceid) Loads the contents of a previously downloaded resource. args: -- resourceid: the id of the resource that has been downloaded (str) returns: -- {content file name: path}","title":"Reference"},{"location":"reference/#hstools","text":"","title":"hstools"},{"location":"reference/#hstoolsauth","text":"This is a test","title":"hstools.auth"},{"location":"reference/#basic_authorization","text":"basic_authorization(authfile='~/.hs_auth_basic') performs basic HS authorization using username and password stored in ~/.hs_auth_basic file in the following format (b64 encoded): { \"usr\": \" \" \"pwd\": \" \" } Returns hs_restclient instance or None","title":"basic_authorization"},{"location":"reference/#oauth2_authorization","text":"oauth2_authorization(authfile='~/.hs_auth') performs HS authorization using OAuth2 credentials stored in ~/.hs_auth file, in a pickled binary format. Returns hs_restclient instance or None","title":"oauth2_authorization"},{"location":"reference/#hstoolscompat","text":"","title":"hstools.compat"},{"location":"reference/#hstoolslog","text":"","title":"hstools.log"},{"location":"reference/#hstoolsresource","text":"","title":"hstools.resource"},{"location":"reference/#hstoolsthreads","text":"","title":"hstools.threads"},{"location":"reference/#hstoolsfuncs","text":"","title":"hstools.funcs"},{"location":"reference/#hstoolsfuncsdelete","text":"","title":"hstools.funcs.delete"},{"location":"reference/#hstoolsfuncsdescribe","text":"","title":"hstools.funcs.describe"},{"location":"reference/#hstoolsfuncsadd","text":"","title":"hstools.funcs.add"},{"location":"reference/#hstoolsfuncscreate","text":"","title":"hstools.funcs.create"},{"location":"reference/#hstoolsfuncsls","text":"","title":"hstools.funcs.ls"},{"location":"reference/#hstoolsfuncscontent","text":"","title":"hstools.funcs.content"},{"location":"reference/#hstoolsfuncsinit","text":"","title":"hstools.funcs.init"},{"location":"reference/#hstoolsfuncsget","text":"","title":"hstools.funcs.get"},{"location":"reference/#hstoolsprogress","text":"","title":"hstools.progress"},{"location":"reference/#hstoolsutilities","text":"","title":"hstools.utilities"},{"location":"reference/#get_server_url_for_path","text":"get_server_url_for_path(p) gets the url corresponding to a given file or directory path p : path to convert into a url returns the url path for the filepath p","title":"get_server_url_for_path"},{"location":"reference/#get_relative_path","text":"get_relative_path(p) gets the path relative to the jupyter home directory p: path to convert into relative path returns the path relative to the default jupyter home directory","title":"get_relative_path"},{"location":"reference/#hstoolshydroshare","text":"","title":"hstools.hydroshare"},{"location":"reference/#hydroshare-objects","text":"class hydroshare()","title":"hydroshare Objects"},{"location":"reference/#__init__","text":"| __init__(save_dir=None, authfile='~/.hs_auth') save_dir is the location that data will hs resources will be saved.","title":"__init__"},{"location":"reference/#close","text":"| close() closes the connection to HydroShare","title":"close"},{"location":"reference/#deleteresource","text":"| deleteResource(resid) Deletes a hydroshare resource args: -- resid: hydroshare resource id returns: -- True if successful, else False","title":"deleteResource"},{"location":"reference/#getresourcemetadata","text":"| getResourceMetadata(resid) Gets metadata for a specified resource. args: -- resid: hydroshare resource id returns: -- resource metadata object","title":"getResourceMetadata"},{"location":"reference/#createresource","text":"| createResource(abstract, title, keywords=[], content_files=[]) Creates a hydroshare resource. args: -- abstract: abstract for resource (str, required) -- title: title of resource (str, required) -- keywords: list of subject keywords (list, default=>[]) -- content_files: data to save as resource content (list, default=>[]) returns: -- resource_id","title":"createResource"},{"location":"reference/#getresource","text":"| getResource(resourceid) Downloads content of a hydroshare resource. args: -- resourceid: id of the hydroshare resource (str) returns: -- None","title":"getResource"},{"location":"reference/#getresourcefiles","text":"| getResourceFiles(resid) returns a list of files in a hydroshare resource","title":"getResourceFiles"},{"location":"reference/#addcontenttoexistingresource","text":"| addContentToExistingResource(resid, source, target=None) Adds content files to an existing hydroshare resource. args: -- resid: id of an existing hydroshare resource (str) -- source: file path to be added to resource -- target: target path relative to the root directory of the resource returns: -- None","title":"addContentToExistingResource"},{"location":"reference/#loadresourcefromlocal","text":"| loadResourceFromLocal(resourceid) Loads the contents of a previously downloaded resource. args: -- resourceid: the id of the resource that has been downloaded (str) returns: -- {content file name: path}","title":"loadResourceFromLocal"}]}