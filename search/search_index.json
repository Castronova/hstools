{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to HSTools A humble collection of HydroShare tools written in Python 3. The HSTools library was originally a port of the CUAHSI JupyterHub utilities.hydroshare package modified to work on desktop computers. The goal is to provide a set of basic functions that simplify working with HydroShare data. About Getting Started - Everything you need to get started using HSTools Commands - A comprehensive list of HSTools commands. Examples - Samples of common tasks that use HSTools Reference - Reference documentation for all functions. Guide for Contributors - A guide for contributing to this project.","title":"Home"},{"location":"#welcome-to-hstools","text":"A humble collection of HydroShare tools written in Python 3. The HSTools library was originally a port of the CUAHSI JupyterHub utilities.hydroshare package modified to work on desktop computers. The goal is to provide a set of basic functions that simplify working with HydroShare data. About Getting Started - Everything you need to get started using HSTools Commands - A comprehensive list of HSTools commands. Examples - Samples of common tasks that use HSTools Reference - Reference documentation for all functions. Guide for Contributors - A guide for contributing to this project.","title":"Welcome to HSTools"},{"location":"commands/","text":"Add Files hs add resource_id [-q] [-v] [-f] [-h] [--overwrite] Add files to an existing HydroShare resource. Multiple files can be added at once and folders are created as necessary. By default existing files will not be replaced, use the --overwrite option if this is desired. positional arguments: resource_id unique HydroShare resource identifier optional arguments: -h, --help show this help message and exit -f FILES [FILES ...], --files FILES [FILES ...] files to add to resource. By default all files will be added to the root directory of the resource. A specific directory can be specified relative to the root directory using the following syntax - <source- path>:<target-path>. --overwrite overwrite existing resource files with thesame name -v verbose output -q silent output Get Resource hs get resource_id [-q] [-v] [-f] [-d] [-h] Retrieve resource content from the HydroShare using a globally unique identifier. This identifier is provided as part of the HydroShare resource URL. These downloaded content is structured in bagit format, more information can be found at: https://www.archivematica.org/en/docs/archivematica-1.4/user- manual/transfer/bags/ positional arguments: resource_id unique identifier of the HydroShare resource to download optional arguments: -h, --help show this help message and exit -d SAVE_DIR, --save-dir SAVE_DIR location to save resources downloaded from HydroShare.org -f force replace HydroShare resource if it already exists -v verbose output -q supress output Create Resource usage: hs create [-q] [-v] [-f] [-k] [-t] [-a] [-h] Create a new HydroShare resource optional arguments: -h, --help show this help message and exit -a ABSTRACT [ABSTRACT ...], --abstract ABSTRACT [ABSTRACT ...] resource description -t TITLE [TITLE ...], --title TITLE [TITLE ...] resource title -k KEYWORDS [KEYWORDS ...], --keywords KEYWORDS [KEYWORDS ...] space separated list of keywords -f FILES [FILES ...], --files FILES [FILES ...] space separated list of files -v verbose output -q suppress output","title":"Commands"},{"location":"commands/#add-files","text":"hs add resource_id [-q] [-v] [-f] [-h] [--overwrite] Add files to an existing HydroShare resource. Multiple files can be added at once and folders are created as necessary. By default existing files will not be replaced, use the --overwrite option if this is desired. positional arguments: resource_id unique HydroShare resource identifier optional arguments: -h, --help show this help message and exit -f FILES [FILES ...], --files FILES [FILES ...] files to add to resource. By default all files will be added to the root directory of the resource. A specific directory can be specified relative to the root directory using the following syntax - <source- path>:<target-path>. --overwrite overwrite existing resource files with thesame name -v verbose output -q silent output","title":"Add Files"},{"location":"commands/#get-resource","text":"hs get resource_id [-q] [-v] [-f] [-d] [-h] Retrieve resource content from the HydroShare using a globally unique identifier. This identifier is provided as part of the HydroShare resource URL. These downloaded content is structured in bagit format, more information can be found at: https://www.archivematica.org/en/docs/archivematica-1.4/user- manual/transfer/bags/ positional arguments: resource_id unique identifier of the HydroShare resource to download optional arguments: -h, --help show this help message and exit -d SAVE_DIR, --save-dir SAVE_DIR location to save resources downloaded from HydroShare.org -f force replace HydroShare resource if it already exists -v verbose output -q supress output","title":"Get Resource"},{"location":"commands/#create-resource","text":"usage: hs create [-q] [-v] [-f] [-k] [-t] [-a] [-h] Create a new HydroShare resource optional arguments: -h, --help show this help message and exit -a ABSTRACT [ABSTRACT ...], --abstract ABSTRACT [ABSTRACT ...] resource description -t TITLE [TITLE ...], --title TITLE [TITLE ...] resource title -k KEYWORDS [KEYWORDS ...], --keywords KEYWORDS [KEYWORDS ...] space separated list of keywords -f FILES [FILES ...], --files FILES [FILES ...] space separated list of files -v verbose output -q suppress output","title":"Create Resource"},{"location":"ref/","text":"","title":"Ref"},{"location":"reference/","text":"hstools hstools.auth basic_authorization basic_authorization(authfile='~/.hs_auth_basic') This function performs basic HS authorization using username and password stored in an external file, e.g. ~/.hs_auth_basic. The file should be b64 encoded and contain JSON dictionary of username and password. Arguments : authfile : base64 encoded authorization file of the format This is a simple example:: import math print 'import done' { \"usr\": \"username\", \"pwd\": \"password\" } Returns : HydroShare.HydroShare object or None oauth2_authorization oauth2_authorization(authfile='~/.hs_auth') performs HS authorization using OAuth2 credentials stored in ~/.hs_auth file, in a pickled binary format. Returns hs_restclient instance or None hstools.compat hstools.log hstools.resource hstools.threads hstools.funcs hstools.funcs.delete hstools.funcs.describe hstools.funcs.add hstools.funcs.create hstools.funcs.ls hstools.funcs.content hstools.funcs.init hstools.funcs.get hstools.progress hstools.utilities get_server_url_for_path get_server_url_for_path(p) gets the url corresponding to a given file or directory path p : path to convert into a url returns the url path for the filepath p get_relative_path get_relative_path(p) gets the path relative to the jupyter home directory p: path to convert into relative path returns the path relative to the default jupyter home directory hstools.hydroshare hydroshare Objects class hydroshare() __init__ | __init__(save_dir=None, authfile='~/.hs_auth') save_dir is the location that data will hs resources will be saved. close | close() closes the connection to HydroShare deleteResource | deleteResource(resid) Deletes a hydroshare resource args: -- resid: hydroshare resource id returns: -- True if successful, else False getResourceMetadata | getResourceMetadata(resid) Gets metadata for a specified resource. args: -- resid: hydroshare resource id returns: -- resource metadata object createResource | createResource(abstract, title, keywords=[], content_files=[]) Creates a hydroshare resource. args: -- abstract: abstract for resource (str, required) -- title: title of resource (str, required) -- keywords: list of subject keywords (list, default=>[]) -- content_files: data to save as resource content (list, default=>[]) returns: -- resource_id getResource | getResource(resourceid) Downloads content of a hydroshare resource. args: -- resourceid: id of the hydroshare resource (str) returns: -- None getResourceFiles | getResourceFiles(resid) returns a list of files in a hydroshare resource addContentToExistingResource | addContentToExistingResource(resid, source, target=None) Adds content files to an existing hydroshare resource. args: -- resid: id of an existing hydroshare resource (str) -- source: file path to be added to resource -- target: target path relative to the root directory of the resource returns: -- None loadResourceFromLocal | loadResourceFromLocal(resourceid) Loads the contents of a previously downloaded resource. args: -- resourceid: the id of the resource that has been downloaded (str) returns: -- {content file name: path}","title":"Reference"},{"location":"reference/#hstools","text":"","title":"hstools"},{"location":"reference/#hstoolsauth","text":"","title":"hstools.auth"},{"location":"reference/#basic_authorization","text":"basic_authorization(authfile='~/.hs_auth_basic') This function performs basic HS authorization using username and password stored in an external file, e.g. ~/.hs_auth_basic. The file should be b64 encoded and contain JSON dictionary of username and password. Arguments : authfile : base64 encoded authorization file of the format This is a simple example:: import math print 'import done' { \"usr\": \"username\", \"pwd\": \"password\" } Returns : HydroShare.HydroShare object or None","title":"basic_authorization"},{"location":"reference/#oauth2_authorization","text":"oauth2_authorization(authfile='~/.hs_auth') performs HS authorization using OAuth2 credentials stored in ~/.hs_auth file, in a pickled binary format. Returns hs_restclient instance or None","title":"oauth2_authorization"},{"location":"reference/#hstoolscompat","text":"","title":"hstools.compat"},{"location":"reference/#hstoolslog","text":"","title":"hstools.log"},{"location":"reference/#hstoolsresource","text":"","title":"hstools.resource"},{"location":"reference/#hstoolsthreads","text":"","title":"hstools.threads"},{"location":"reference/#hstoolsfuncs","text":"","title":"hstools.funcs"},{"location":"reference/#hstoolsfuncsdelete","text":"","title":"hstools.funcs.delete"},{"location":"reference/#hstoolsfuncsdescribe","text":"","title":"hstools.funcs.describe"},{"location":"reference/#hstoolsfuncsadd","text":"","title":"hstools.funcs.add"},{"location":"reference/#hstoolsfuncscreate","text":"","title":"hstools.funcs.create"},{"location":"reference/#hstoolsfuncsls","text":"","title":"hstools.funcs.ls"},{"location":"reference/#hstoolsfuncscontent","text":"","title":"hstools.funcs.content"},{"location":"reference/#hstoolsfuncsinit","text":"","title":"hstools.funcs.init"},{"location":"reference/#hstoolsfuncsget","text":"","title":"hstools.funcs.get"},{"location":"reference/#hstoolsprogress","text":"","title":"hstools.progress"},{"location":"reference/#hstoolsutilities","text":"","title":"hstools.utilities"},{"location":"reference/#get_server_url_for_path","text":"get_server_url_for_path(p) gets the url corresponding to a given file or directory path p : path to convert into a url returns the url path for the filepath p","title":"get_server_url_for_path"},{"location":"reference/#get_relative_path","text":"get_relative_path(p) gets the path relative to the jupyter home directory p: path to convert into relative path returns the path relative to the default jupyter home directory","title":"get_relative_path"},{"location":"reference/#hstoolshydroshare","text":"","title":"hstools.hydroshare"},{"location":"reference/#hydroshare-objects","text":"class hydroshare()","title":"hydroshare Objects"},{"location":"reference/#__init__","text":"| __init__(save_dir=None, authfile='~/.hs_auth') save_dir is the location that data will hs resources will be saved.","title":"__init__"},{"location":"reference/#close","text":"| close() closes the connection to HydroShare","title":"close"},{"location":"reference/#deleteresource","text":"| deleteResource(resid) Deletes a hydroshare resource args: -- resid: hydroshare resource id returns: -- True if successful, else False","title":"deleteResource"},{"location":"reference/#getresourcemetadata","text":"| getResourceMetadata(resid) Gets metadata for a specified resource. args: -- resid: hydroshare resource id returns: -- resource metadata object","title":"getResourceMetadata"},{"location":"reference/#createresource","text":"| createResource(abstract, title, keywords=[], content_files=[]) Creates a hydroshare resource. args: -- abstract: abstract for resource (str, required) -- title: title of resource (str, required) -- keywords: list of subject keywords (list, default=>[]) -- content_files: data to save as resource content (list, default=>[]) returns: -- resource_id","title":"createResource"},{"location":"reference/#getresource","text":"| getResource(resourceid) Downloads content of a hydroshare resource. args: -- resourceid: id of the hydroshare resource (str) returns: -- None","title":"getResource"},{"location":"reference/#getresourcefiles","text":"| getResourceFiles(resid) returns a list of files in a hydroshare resource","title":"getResourceFiles"},{"location":"reference/#addcontenttoexistingresource","text":"| addContentToExistingResource(resid, source, target=None) Adds content files to an existing hydroshare resource. args: -- resid: id of an existing hydroshare resource (str) -- source: file path to be added to resource -- target: target path relative to the root directory of the resource returns: -- None","title":"addContentToExistingResource"},{"location":"reference/#loadresourcefromlocal","text":"| loadResourceFromLocal(resourceid) Loads the contents of a previously downloaded resource. args: -- resourceid: the id of the resource that has been downloaded (str) returns: -- {content file name: path}","title":"loadResourceFromLocal"}]}